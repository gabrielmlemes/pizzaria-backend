// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Category {
  id   String @id @default(uuid())
  name String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  products Product[]

  @@map("category")
}

model Product {
  id          String  @id @default(uuid())
  name        String
  price       Decimal @db.Decimal(10, 2)
  description String
  banner      String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  items Item[]

  @@map("products")
}

// Novo pedido (quando abrir uma mesa)
model Order {
  id         String   @id @default(uuid())
  table      Int
  status     Boolean  @default(false) // o pedido sempre vai começar como false, pois ainda não foi concluido o pedido 
  draft      Boolean  @default(true) // modo rascunho, pois só vai para a cozinha quando o garçom finalizar o pedido
  name       String? // nome do cliente (opcional)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  items      Item[]

  @@map("orders")
}

// Itens do pedido da mesa (Item -> Order)
model Item {
  id     String @id @default(uuid())
  amount Int // quantidade do mesmo item

  productId String
  product   Product @relation(fields: [productId], references: [id])

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  @@map("items")
}
